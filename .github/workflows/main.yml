name: Actions ðŸ˜Ž

on: [push, pull_request, workflow_dispatch]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  issues: read
  checks: write
  pull-requests: write
  deployments: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build my project âœ¨
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      # Tests
      - name: Setup dotnet 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Install dependencies
        run: dotnet restore "TestsCore/Tests/Tests.csproj"
        
      - name: Build
        run: dotnet build "TestsCore/Tests/Tests.csproj"

      - name: 'Test'
        run: 'dotnet test --logger trx --no-build --verbosity normal "TestsCore/Tests/Tests.csproj"'

      - name: 'Publish Test Results'
        uses: 'EnricoMi/publish-unit-test-result-action@v2'
        if: always()
        with:
          files: |
            TestsCore/**/*.trx

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL

      # Add starnge Unity content types
      # https://docs.unity3d.com/Manual/webgl-server-configuration-code-samples.html
      - name: "Create custom headers"
        run: |
          cd "build/WebGL/WebGL"
          sudo tee -a _headers > /dev/null <<EOT
          /*.js.br
            Content-Type: application/javascript
            Content-Encoding: br
          /*.wasm.br
            Content-Type: application/wasm
            Content-Encoding: br
          EOT

      # Output
      - uses: actions/upload-artifact@v4
        with:
          name: Build
          path: "build"

      # Deploy
      #- name: Publish to Cloudflare Pages
      #  uses: cloudflare/pages-action@v1
      #  with:
      #    apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      #    accountId: "28cc668bf6c1e5f418e20d406e04b023"
      #    projectName: "tau-simple-game"
      #    directory: "build/WebGL/WebGL"
      #    # Optional: Enable this if you want to have GitHub Deployments triggered
      #    gitHubToken: ${{ secrets.GITHUB_TOKEN }}
      #    # Optional: Change the Wrangler version, allows you to point to a specific version or a tag such as `beta`
      #    wranglerVersion: '3'
      
      - uses: actions/upload-pages-artifact@v3
        if: github.ref == 'refs/heads/main'
        with:
          path: "build/WebGL/WebGL"

      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4
